function check_git()
{
	if type "git" > /dev/null 2>&1 ; then
        	is_git=1
		#git --version
	else
		is_git=0
	fi
}

function run_cmd()
{
	$@ > $WORKSPACE/run-update.log 2>&1
	ret=$?
	if [ "$ret" -eq "0" ]
	then
		echo "Excuted $@ ..."
	else
		echo "Error in excuting $@ ..."
		cat $WORKSPACE/run-update.log
		exit $ret
	fi
}

function get_version()
{
	echo "Get latest github support ..."
	if [ -f versions.json ]; then
		run_cmd mv versions.json versions.json.back
	fi
	run_cmd wget https://pages.github.com/versions.json
}

function copy_file()
{
	echo "Copy file $1 to $2 ..."
	if [ -f $1 ]; then
		run_cmd cp $1 $2
	else
		echo "Unable to find $1 .."
		exit 1
	fi
}

function make_diploy()
{
        echo "Make docker deply files ..."
	copy_file Gemfile deploy/
	copy_file Gemfile.lock deploy/
}

function clean_old_logs()
{
	echo "Clearing old files ..."
	if [ -d $WORKSPACE/_site ]; then
		echo "_site ..."
    		run_cmd rm -rf $WORKSPACE/_site
	fi
        if [ -d $WORKSPACE/.sass-cache ]; then
                echo ".sass-cache ..."
                run_cmd rm -rf $WORKSPACE/.sass-cache
        fi	
}

function build_update()
{
        run_cmd bundle update
        if [ "$?" -eq "0" ]
        then
                echo "Update good ..."
        else
                echo "Error in Updating ..."
                exit 1
        fi
}

function build_check()
{

	run_cmd bundle exec jekyll build --verbose --trace
	if [ "$?" -eq "0" ]
	then
		echo "Build good ..."
	else
		echo "Error in build ..."
		exit 1
	fi
}

function git_commit()
{
	if [ "$is_git" -eq 1 ]
	then
		for temp_file in $(git diff --name-only)
		do
			echo "Commiting $temp_file in git ..."
			run_cmd git add $temp_file
			run_cmd git commit $temp_file -m"$COMMIT_MSG"
		done
	else
		exit 1
	fi		
}

function git_addf()
{
        if [ "$is_git" -eq 1 ]
        then
		temp_file="$1"
                if [ -f "$temp_file" ]
                then
                        echo "Adding $temp_file ..."
                        run_cmd git add "$temp_file"
                        run_cmd git commit "$temp_file" -m"$COMMIT_MSG"
                else
			echo "Unable to find the $temp_file file .."
		fi
        else
                exit 1
        fi
}

function check_ingnore()
{
	temp_file="$1"
        while true; do
                read -p "Do you wish to ignore $temp_file permanently?" yn
                case $yn in
                        [Yy]* ) add_ingnore "$temp_file"; break;;
                        [Nn]* ) echo "Skiping $temp_file"; break;;
                        * ) echo "Please answer yes or no.";;
                esac
        done
}

function add_ingnore()
{
	temp_file="$1"
	echo "Adding $temp_file to ingnore ..."
	if [ -f $WORKSPACE/.gitignore ]
	then
		echo "$temp_file" >> $WORKSPACE/.gitignore
	else
		echo "# Added by script - add other file before this." >> $WORKSPACE/.gitignore
		echo "$temp_file" >> $WORKSPACE/.gitignore
	fi
}

function add_new()
{
	temp_file="$1"
        while true; do
                read -p "Do you wish to add $temp_file to repo?" yn
                case $yn in
                        [Yy]* ) git_addf "$temp_file"; break;;
                        [Nn]* ) check_ingnore "$temp_file"; break;;
                        * ) echo "Please answer yes or no.";;
                esac
        done
}

function check_new()
{
	IFS=$'\n'
	for temp_file in $(git ls-files --others --exclude-standard)
	do
                if [ -f $WORKSPACE/.gitignore ]
                then    
                        isFile=$(cat $WORKSPACE/.gitignore | grep -v "^ *\(#.*\|\)$" | grep "$temp_file" | wc -l)
                else
                        echo "# Added by script - add other file before this." >> $WORKSPACE/.gitignore
                        echo "$temp_file" >> $WORKSPACE/.gitignore
                        isFile="0"
                fi
		if [ "$isFile" -eq "0" ]
		then
			add_new "$temp_file"
		else
			echo "This file $temp_file in ignore - If like to add edit .gitignore file ..."
		fi
	done
	unset IFS
}

function git_push()
{
        if [ "$is_git" -eq 1 ]
        then
		echo "Pusing chnages to git ..."
                run_cmd git push
        else
                exit 1
        fi
}

function dep_update()
{
	echo "Update gems ..."
	run_cmd bundle update
}

function site_build()
{
	echo "Build jekyll site ..."
	run_cmd bundle exec jekyll build --verbose --trace
}

function run_htmlproof()
{
	echo "Run html proof ..."
	run_cmd bundle exec htmlproof ./_site --disable-external
}

function rm_proff_temp()
{
	echo "Remove htmlproof temp files ..."
	run_cmd rm -rf tmp
}

function site_run()
{
	echo "Run jekyll server ...."
	bundle exec jekyll serve --verbose --trace
}

